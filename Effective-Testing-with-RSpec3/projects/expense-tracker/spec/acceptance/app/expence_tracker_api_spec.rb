require 'rack/test'
require 'json'
require_relative '../../../app/api'

# Write the code you wish you had
#  - then fill in the implementation
#  - design thing's from the caller's perspective

module ExpenseTracker

	RSpec.describe 'Expense Tracker API', :db do
		include Rack::Test::Methods

		# fixes: undefined local variable or method ‘app’ error message
		# test method requires an 'app' method that returns the web app
		def app
			ExpenseTracker::API.new
		end

		def post_expense(expense)
			# 'posting' key/value pairs to the '/expenses' endpoint
			# post/get requests can be generated by a gui/cli app or rspec
			# 'post' is a Rack:Test method which simulates http post
			post '/expenses', JSON.generate(expense)

			# Rack::Test provides the `last_response` method to check http responses
			expect(last_response.status).to eq 200

			# we expect the response to cotain a hash with the 'expenses_id' key and a integer value
			parsed = JSON.parse(last_response.body)
			expect(parsed).to include('expense_id' => a_kind_of(Integer))

			# add an id key to the hash with whatever ID is returned by the response
			expense.merge('id' => parsed['expense_id'])
		end


		it "records submitted expenses" do
			# pending "Need to persist expenses to the server"

			# we can use either strings or symbols for the keys - JSON treats them th same
			# POST expenses to the web app
			coffee = post_expense(
					'payee' => 'Starbucks',
					'amount' => 5.75,
					'date' => '2017-06-10'
			)

			zoo = post_expense(
					'payee' => 'Zoo',
					'amount' => 15.75,
					'date' => '2017-06-10'
			)

			groceries = post_expense(
					'payee' => 'Whole Foods',
					'amount' => 35.75,
					'date' => '2017-06-11'
			)

			# fetch expenses for June 10th
			get '/expenses/2017-06-10'

			expect(last_response.status).to eq 200
			expenses = JSON.parse(last_response.body)
			expect(expenses).to contain_exactly(coffee, zoo)
		end

	end

end